# VS Code does not support YAML-based grammar definitions.
# This file must be converted into a JSON-based grammar. A
# corresponding VS Code build taks has been provided in the repository.
---
scopeName: python-sphinx.injection
injectionSelector: string.quoted.docstring

# This is a special key that will be extracted by the Python utility
# "build-grammar.py".
# This uses the same compile time expression syntax as GitHub actions,
# so "${{ apple }}" would get replaced by the corresponding "apple" key
# defined in this mapping.
variables:
  captureLeadingWhitespace: ^([\t ]*)
  roleName: "[-A-Za-z0-9_]+"
  matchLeadingWhitespace: ^\1(?=\S)
  refTarget: "[a-zA-Z0-9/\\.-]+"

# Top-level patterns to inject
patterns:
  - include: "#directive"
  - include: "#interpreted-text-basic"
  - include: "#emphasis"
  - include: "#inline-literal"
  - include: "#link-reference"
  - include: "#link-definition"
  - include: "#tag"
  - include: "#cross-references"

# Pattern definitions
repository:
  interpreted-text-basic:
    # Generic interpreted text role
    # ---
    # This catches interpreted text roles without a role specification.
    # In Docstrings, this is mostly used for references to parameters
    # like `my_attr`.
    match: (`)([^`]+)(`)(?!_)
    captures:
      1: { name: punctuation.definition.interpreted.sphinx }
      2: { name: string.other.interpreted.sphinx }
      3: { name: punctuation.definition.interpreted.sphinx }

  link-reference:
    # Inline references to links
    # ---
    # Basic link:     `target`_
    # Named link:     `Link name <target>`_
    # Anonymous link: `Link name`__
    match: (`)(([A-Za-z0-9][A-Za-z0-9 \-]+ (<)${{ refTarget }}(>))|${{ refTarget }})(`_{1,2})
    captures:
      1: { name: punctuation.definition.link.sphinx }
      2: { name: string.other.link.title.sphinx }
      3: { name: punctuation.definition.location.sphinx }
      4: { name: punctuation.definition.location.sphinx }
      5: { name: punctuation.definition.link.sphinx }
    name: meta.link.reference.sphinx

  inline-literal:
    # Inline literal text blocks
    # ---
    # This catches inline literal values like ``example``.
    match: (``)([^`\n]+?)(``)
    captures:
      1: { name: punctuation.definition.raw.sphinx }
      2: { name: markup.raw.sphinx }
      3: { name: punctuation.definition.raw.sphinx }

  directive:
    # Interpreted text with role specification
    # ---
    # This captures one-line blocks like ".. code-block:: python".
    match: ${{ captureLeadingWhitespace }}(\.\.) ([a-z]${{ roleName }})(::)( (.+))?
    captures:
      2: { name: punctuation.definition.directive.sphinx }
      3: { name: entity.name.directive.sphinx }
      4: { name: punctuation.separator.key-value.sphinx }
      5: { name: support.directive.sphinx }

  emphasis:
    # For coding with ~passion~ \o/
    patterns:
      # Bold text, for when you need to write with passion
      - match: (\*\*)[^\t *]([^*]*[^\t *])?(\*\*)
        captures:
          1: { name: punctuation.definition.bold.sphinx }
          4: { name: punctuation.definition.bold.sphinx }
        name: markup.bold.sphinx
      # Italic text, for writing lies
      - match: (\*)[^\t *]([^*]*[^\t *])?(\*)
        captures:
          1: { name: punctuation.definition.italic.sphinx }
          4: { name: punctuation.definition.italic.sphinx }
        name: markup.italic.sphinx

  link-definition:
    # Link definitions to be used elsewhere
    patterns:
      # Named link definition
      # ---
      # .. _`Link name`: https://www.python.org/
      # .. _Link name: https://www.python.org/
      - match: (\.\.) (_)`?([^`_]+[^`]*)`?(:) (.+)
        captures:
          1: { name: punctuation.definition.link.sphinx }
          2: { name: punctuation.definition.string.sphinx }
          3: { name: string.other.link.title.sphinx }
          4: { name: punctuation.separator.key-value.sphinx }
          5: { name: markup.underline.link.sphinx }
        name: meta.link.reference.def.sphinx
      # Anonymous link definition
      # ---
      # .. __: https://www.python.org/
      - match: (\.\.) (_{2})(:) (.+)
        captures:
          1: { name: punctuation.definition.link.sphinx }
          2: { name: punctuation.definition.string.sphinx }
          3: { name: punctuation.separator.key-value.sphinx }
          4: { name: markup.underline.link.sphinx }

  tag:
    # RST inline tags. These are mostly used for autodoc tags, i.e.
    # things like ":param key:" or ":rtype: str".
    match: (:)(([a-z][A-Za-z0-9]{2,})( ([A-Za-z_\*\\][A-Za-z0-9_\.\*\\]+))*)(:)(?!`)
    captures:
      1: { name: punctuation.definition.interpreted.start.sphinx }
      2: { name: entity.name.tag.sphinx }
      5: { name: entity.name.tag.value.sphinx }
      6: { name: punctuation.definition.interpreted.end.sphinx }

  cross-references:
    # Add support for colourful cross-references
    match: (:)(\w+)(:)(`)([^`]+)(`)(?!_)
    captures:
      1: { name: punctuation.definition.interpreted.sphinx }
      2: { name: entity.name.tag.sphinx }
      3: { name: punctuation.definition.interpreted.sphinx }
      4: { name: punctuation.definition.location.sphinx }
      5: { name: entity.name.role.sphinx }
      6: { name: punctuation.definition.location.sphinx }
